#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <set>
#include <windows.h>
#include <wininet.h>
#include <sstream>

#pragma comment(lib, "wininet.lib")

class HangManGame {
public:
	inline void drawHangmanStage(int stage) {
		// I had to use GPT to draw these but don't worry as long as you understand the code generated by it, it's okay to copy but not that much
		switch (stage) {
		case 1:
			std::cout << "   O\n\n\n\n\n";
			break;
		case 2:
			std::cout << "   O\n"
				<< "   |\n"
				<< "   |\n"
				<< "   |\n\n";
			break;
		case 3:
			std::cout << "   O\n"
				<< "  /|\n"
				<< "   |\n"
				<< "   |\n\n";
			break;
		case 4:
			std::cout << "   O\n"
				<< "  /|\\\n"
				<< "   |\n"
				<< "   |\n\n";
			break;
		case 5:
			std::cout << "   O\n"
				<< "  /|\\\n"
				<< "   |\n"
				<< "   |\n"
				<< "  /\n";
			break;
		case 6:
			std::cout << "   O\n"
				<< "  /|\\\n"
				<< "   |\n"
				<< "   |\n"
				<< "  / \\\n";
			break;
		default:
			break;
		}
	}
};

class Game : public HangManGame {
private:
	std::vector<std::string> wordList = getRandomWordFromInternet(5);
public:
	inline void start() {
		std::string userInput;
		std::string selectedWord = chooseRandomWordFromVector(wordList);
		std::string maskedWord;
		int currentHangmanStage = 0;
		bool isCorrectGuess = false;
		std::set<char> guessedCharacters;

		for (int i = 0; i < selectedWord.size(); i++) {
			maskedWord.append("_ ");
		}

		try {
			if (!InternetGetConnectedState(nullptr, 0)) {
				throw "You MUST be connected to the internet for the game to function.\n\n";
			}
		}
		catch (const char* errMsg) {
			std::cout << errMsg;
			return;
		}

		std::cout << "***************************************\n";
		std::cout << "***************************************\n";
		while (true) {

			std::cout << '\n'; // Separator
			std::cout << '\n';
			std::cout << "Guess the word\n";
			std::cout << maskedWord << '\n';
			std::getline(std::cin, userInput);

			if (userInput.empty() || !isalpha(userInput[0])) {
				std::cout << '\n';
				std::cout << "Only letters A-Z are allowed.\n\n";
				std::cout << '\n';
				continue;
			}

			if (userInput.length() != 1) {
				std::cout << '\n';
				std::cout << "Please enter only ONE letter at a time.\n\n";
				std::cout << '\n';
				continue;
			}

			char guessedChar = tolower(userInput[0]);

			if (guessedCharacters.count(guessedChar)) {
				std::cout << '\n';
				std::cout << "You already guessed that letter!\n\n";
				std::cout << '\n';
			}

			guessedCharacters.insert(guessedChar);

			isCorrectGuess = false;
			for (int i = 0; i < selectedWord.size(); i++) {
				if (selectedWord[i] == guessedChar) {
					maskedWord[i * 2] = selectedWord[i]; // Underscores are at even indices: 0, 2, 4, ...
					isCorrectGuess = true;
				}
			}

			if (!isCorrectGuess) {
				currentHangmanStage++;
			}

			if (maskedWord.find('_') == std::string::npos) {
				std::cout << '\n';
				std::cout << "Congrats! You guessed the word: " << selectedWord << "\n";
				std::cout << '\n';
				break;
			}

			if (currentHangmanStage >= 6) {
				system("cls"); //Clear console
				std::cout << '\n';
				std::cout << "You lost!\n";
				std::cout << "The correct word was: " << selectedWord << '\n';
				break;
			}

			//Draw Events
			drawHangmanStage(currentHangmanStage);
		}

		std::cout << "Bye\n";
	}

	inline std::string chooseRandomWordFromVector(std::vector<std::string>& wordVector) {
		if (wordVector.empty()) return ""; // Return empty string if vector has no elements
		return wordVector.at(rand() % wordVector.size()); // Return random word from vector
	}

	inline std::vector<std::string> getRandomWordFromInternet(int hidden_1) {
		std::vector<std::string> result;

		HINTERNET hInternet = InternetOpenA("WordFetcher", INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
		if (hInternet == NULL) {
			std::cout << "Make sure you are connected to internet first!\n";
			return result;
		}

		for (int i = 0; i < hidden_1; ++i) {
			const char* url = "https://random-word-api.herokuapp.com/word?number=1";
			HINTERNET hConnect = InternetOpenUrlA(hInternet, url, NULL, 0, INTERNET_FLAG_RELOAD, 0);

			if (hConnect == NULL) {
				std::cout << "Failed to connect to the URL on attempt " << (i + 1) << "!\n";
				continue;
			}

			char buff[1024];
			DWORD bytesRead;
			std::string response;

			while (InternetReadFile(hConnect, buff, sizeof(buff) - 1, &bytesRead) && bytesRead > 0) {
				buff[bytesRead] = '\0'; //Null termination
				response += buff;
			}

			InternetCloseHandle(hConnect);

			// Parse single word from JSON like ["example"]
			size_t start = response.find('"');
			size_t end = response.find('"', start + 1);
			if (start != std::string::npos && end != std::string::npos && end > start) {
				std::string word = response.substr(start + 1, end - start - 1);
				result.push_back(word);
			}
		}

		InternetCloseHandle(hInternet);
		return result;
	}
};

int main() {

	srand(static_cast<unsigned>(time(0)));
	Game* gameInstance = new Game();
	gameInstance->start();
	delete gameInstance;

	return 0;
}